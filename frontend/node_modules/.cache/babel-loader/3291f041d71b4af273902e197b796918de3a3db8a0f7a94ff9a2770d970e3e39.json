{"ast":null,"code":"// src/react/index.ts\nexport * from \"@reduxjs/toolkit\";\n\n// src/dynamicMiddleware/react/index.ts\nimport { createDynamicMiddleware as cDM } from \"@reduxjs/toolkit\";\nimport { createDispatchHook, ReactReduxContext, useDispatch as useDefaultDispatch } from \"react-redux\";\nvar createDynamicMiddleware = () => {\n  const instance = cDM();\n  const createDispatchWithMiddlewareHookFactory = (context = ReactReduxContext) => {\n    const useDispatch = context === ReactReduxContext ? useDefaultDispatch : createDispatchHook(context);\n    function createDispatchWithMiddlewareHook2(...middlewares) {\n      instance.addMiddleware(...middlewares);\n      return useDispatch;\n    }\n    createDispatchWithMiddlewareHook2.withTypes = () => createDispatchWithMiddlewareHook2;\n    return createDispatchWithMiddlewareHook2;\n  };\n  const createDispatchWithMiddlewareHook = createDispatchWithMiddlewareHookFactory();\n  return {\n    ...instance,\n    createDispatchWithMiddlewareHookFactory,\n    createDispatchWithMiddlewareHook\n  };\n};\nexport { createDynamicMiddleware };","map":{"version":3,"names":["createDynamicMiddleware","cDM","createDispatchHook","ReactReduxContext","useDispatch","useDefaultDispatch","instance","createDispatchWithMiddlewareHookFactory","context","createDispatchWithMiddlewareHook2","middlewares","addMiddleware","withTypes","createDispatchWithMiddlewareHook"],"sources":["/Users/temilowoogundeyin/Gatekeep-demo/frontend/node_modules/@reduxjs/toolkit/src/react/index.ts","/Users/temilowoogundeyin/Gatekeep-demo/frontend/node_modules/@reduxjs/toolkit/src/dynamicMiddleware/react/index.ts"],"sourcesContent":["// This must remain here so that the `mangleErrors.cjs` build script\n// does not have to import this into each source file it rewrites.\nimport { formatProdErrorMessage } from '@reduxjs/toolkit';\nexport * from '@reduxjs/toolkit';\nexport { createDynamicMiddleware } from '../dynamicMiddleware/react';\nexport type { CreateDispatchWithMiddlewareHook } from '../dynamicMiddleware/react/index';","import type { DynamicMiddlewareInstance, GetDispatch, GetState, MiddlewareApiConfig, TSHelpersExtractDispatchExtensions } from '@reduxjs/toolkit';\nimport { createDynamicMiddleware as cDM } from '@reduxjs/toolkit';\nimport type { Context } from 'react';\nimport type { ReactReduxContextValue } from 'react-redux';\nimport { createDispatchHook, ReactReduxContext, useDispatch as useDefaultDispatch } from 'react-redux';\nimport type { Action, Dispatch, Middleware, UnknownAction } from 'redux';\nexport type UseDispatchWithMiddlewareHook<Middlewares extends Middleware<any, State, DispatchType>[] = [], State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>> = () => TSHelpersExtractDispatchExtensions<Middlewares> & DispatchType;\nexport type CreateDispatchWithMiddlewareHook<State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>> = {\n  <Middlewares extends [Middleware<any, State, DispatchType>, ...Middleware<any, State, DispatchType>[]]>(...middlewares: Middlewares): UseDispatchWithMiddlewareHook<Middlewares, State, DispatchType>;\n  withTypes<MiddlewareConfig extends MiddlewareApiConfig>(): CreateDispatchWithMiddlewareHook<GetState<MiddlewareConfig>, GetDispatch<MiddlewareConfig>>;\n};\ntype ActionFromDispatch<DispatchType extends Dispatch<Action>> = DispatchType extends Dispatch<infer Action> ? Action : never;\ntype ReactDynamicMiddlewareInstance<State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>> = DynamicMiddlewareInstance<State, DispatchType> & {\n  createDispatchWithMiddlewareHookFactory: (context?: Context<ReactReduxContextValue<State, ActionFromDispatch<DispatchType>> | null>) => CreateDispatchWithMiddlewareHook<State, DispatchType>;\n  createDispatchWithMiddlewareHook: CreateDispatchWithMiddlewareHook<State, DispatchType>;\n};\nexport const createDynamicMiddleware = <State = any, DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>>(): ReactDynamicMiddlewareInstance<State, DispatchType> => {\n  const instance = cDM<State, DispatchType>();\n  const createDispatchWithMiddlewareHookFactory = (\n  // @ts-ignore\n  context: Context<ReactReduxContextValue<State, ActionFromDispatch<DispatchType>> | null> = ReactReduxContext) => {\n    const useDispatch = context === ReactReduxContext ? useDefaultDispatch : createDispatchHook(context);\n    function createDispatchWithMiddlewareHook<Middlewares extends Middleware<any, State, DispatchType>[]>(...middlewares: Middlewares) {\n      instance.addMiddleware(...middlewares);\n      return useDispatch;\n    }\n    createDispatchWithMiddlewareHook.withTypes = () => createDispatchWithMiddlewareHook;\n    return createDispatchWithMiddlewareHook as CreateDispatchWithMiddlewareHook<State, DispatchType>;\n  };\n  const createDispatchWithMiddlewareHook = createDispatchWithMiddlewareHookFactory();\n  return {\n    ...instance,\n    createDispatchWithMiddlewareHookFactory,\n    createDispatchWithMiddlewareHook\n  };\n};"],"mappings":";AAGA,cAAc;;;ACFd,SAASA,uBAAA,IAA2BC,GAAA,QAAW;AAG/C,SAASC,kBAAA,EAAoBC,iBAAA,EAAmBC,WAAA,IAAeC,kBAAA,QAA0B;AAYlF,IAAML,uBAAA,GAA0BA,CAAA,KAAgJ;EACrL,MAAMM,QAAA,GAAWL,GAAA,CAAyB;EAC1C,MAAMM,uCAAA,GAA0CA,CAEhDC,OAAA,GAA2FL,iBAAA,KAAsB;IAC/G,MAAMC,WAAA,GAAcI,OAAA,KAAYL,iBAAA,GAAoBE,kBAAA,GAAqBH,kBAAA,CAAmBM,OAAO;IACnG,SAASC,kCAAA,GAAgGC,WAAA,EAA0B;MACjIJ,QAAA,CAASK,aAAA,CAAc,GAAGD,WAAW;MACrC,OAAON,WAAA;IACT;IACAK,iCAAA,CAAiCG,SAAA,GAAY,MAAMH,iCAAA;IACnD,OAAOA,iCAAA;EACT;EACA,MAAMI,gCAAA,GAAmCN,uCAAA,CAAwC;EACjF,OAAO;IACL,GAAGD,QAAA;IACHC,uCAAA;IACAM;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}